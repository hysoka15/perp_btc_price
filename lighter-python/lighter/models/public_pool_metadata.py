# coding: utf-8

"""
    

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from lighter.models.public_pool_share import PublicPoolShare
from typing import Optional, Set
from typing_extensions import Self

class PublicPoolMetadata(BaseModel):
    """
    PublicPoolMetadata
    """ # noqa: E501
    code: StrictInt
    message: Optional[StrictStr] = None
    account_index: StrictInt
    account_type: StrictInt
    name: StrictStr
    l1_address: StrictStr
    annual_percentage_yield: Union[StrictFloat, StrictInt]
    status: StrictInt
    operator_fee: StrictStr
    total_asset_value: StrictStr
    total_shares: StrictInt
    account_share: Optional[PublicPoolShare] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["code", "message", "account_index", "account_type", "name", "l1_address", "annual_percentage_yield", "status", "operator_fee", "total_asset_value", "total_shares", "account_share"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicPoolMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account_share
        if self.account_share:
            _dict['account_share'] = self.account_share.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicPoolMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "message": obj.get("message"),
            "account_index": obj.get("account_index"),
            "account_type": obj.get("account_type"),
            "name": obj.get("name"),
            "l1_address": obj.get("l1_address"),
            "annual_percentage_yield": obj.get("annual_percentage_yield"),
            "status": obj.get("status"),
            "operator_fee": obj.get("operator_fee"),
            "total_asset_value": obj.get("total_asset_value"),
            "total_shares": obj.get("total_shares"),
            "account_share": PublicPoolShare.from_dict(obj["account_share"]) if obj.get("account_share") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


